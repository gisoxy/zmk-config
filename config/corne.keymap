/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        lh_pht: left_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <250>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <19 20 21 22>;    // <---[[right-hand keys]]
        };

        rh_pht: rh_pht {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <250>;
            bindings = <&kp>, <&kp>;

            label = "RH_PHT";
            hold-trigger-key-positions = <13 14 15 16>;
        };

        ht_def: ht_def {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <300>;
            bindings = <&to>, <&mo>;

            label = "HT_DEF";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        input_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE        &kp Q            &kp W           &kp E           &kp R            &kp T        &kp Y    &kp U            &kp I           &kp O               &kp P               &kp BSPC
&kp TAB           &lh_pht LSHFT A  &lh_pht LGUI S  &lh_pht LALT D  &lh_pht LCTRL F  &kp G        &kp H    &rh_pht LCTRL J  &rh_pht RALT K  &rh_pht LEFT_GUI K  &rh_pht RSHFT SEMI  &kp SQT
&kp LS(LEFT_ALT)  &kp Z            &kp X           &kp C           &kp V            &kp B        &kp N    &kp M            &kp COMMA       &kp DOT             &kp FSLH            &kp LEFT_BRACKET
                                                   &mo 4           &mo 1            &kp SPACE    &kp RET  &mo 2            &mo 3
            >;
        };

        symbol_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans     &none   &none     &none     &none   &none        &kp CARET      &kp ASTRK    &kp LPAR  &kp RPAR  &kp MINUS  &kp EQUAL
&kp TILDE  &kp AT  &kp HASH  &kp DLLR  &trans  &trans       &kp AMPERSAND  &kp PIPE     &kp LBKT  &kp RBKT  &kp PLUS   &kp GRAVE
&trans     &trans  &trans    &trans    &trans  &trans       &kp EXCL       &kp PERCENT  &kp LT    &kp GT    &kp BSLH   &kp SLASH
                             &none     &trans  &kp SPACE    &kp RET        &trans       &none
            >;
        };

        number_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &trans  &kp N7  &kp N8  &kp N9         &kp PLUS     &kp MINUS  &none   &none  &none  &none  &kp BSPC
&kp TILDE   &trans  &kp N4  &kp N5  &kp N6         &kp ASTRK    &kp FSLH   &none   &none  &none  &none  &trans
&trans      &trans  &kp N1  &kp N2  &kp N3         &kp DOT      &kp EQUAL  &none   &none  &none  &none  &trans
                            &kp N0  &kp BACKSPACE  &kp SPACE    &kp RET    &trans  &none
            >;
        };

        function_layter {
            bindings = <
&trans  &trans  &kp F7  &kp F8  &kp F9  &kp F10    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F1  &kp F2  &kp F3  &kp F12    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans     &trans  &trans  &trans
            >;
        };

        command_layer {
            bindings = <
&to 0        &kp LC(Q)            &kp LC(W)           &kp LC(E)           &kp LC(R)            &kp LC(T)    &kp LC(Y)       &kp LC(U)                 &kp LC(I)              &kp LC(O)                     &kp LC(P)               &kp LC(LA(DELETE))
&kt LA(TAB)  &lh_pht LSHFT LC(A)  &lh_pht LGUI LC(S)  &lh_pht LALT LC(D)  &lh_pht LCTRL LC(F)  &kp LC(G)    &kp LEFT_ARROW  &rh_pht LCTRL DOWN_ARROW  &rh_pht RALT UP_ARROW  &rh_pht LEFT_GUI RIGHT_ARROW  &rh_pht RSHFT LC(SEMI)  &kp LC(SQT)
&none        &kp LC(Z)            &kp LC(X)           &kp LC(C)           &kp LC(V)            &kp LC(B)    &kp LC(N)       &kp LC(M)                 &kp LC(COMMA)          &kp LC(DOT)                   &kp LC(FSLH)            &kp PRINTSCREEN
                                                      &none               &none                &kp SPACE    &kp RET         &kp BACKSPACE             &kp DELETE
            >;
        };

        setting_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans        &trans        &trans        &bt BT_CLR_ALL  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans        &trans        &trans        &trans          &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans          &trans  &trans
                        &trans  &trans  &trans    &trans        &trans        &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        go_settings {
            if-layers = <1 2>;
            then-layer = <6>;
        };
    };
};
