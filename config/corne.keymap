/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        lh_pht: left_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <19 20 21 22 18 30 31 32 33 34 35 23 11 10 9 8 7 6 39 40 41>;    // <---[[right-hand keys]]
            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
        };

        rh_pht: rh_pht {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            bindings = <&kp>, <&kp>;

            label = "RH_PHT";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
        };

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        ht_layer: ht_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_LAYER";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
        };

        mmb_less: mmb_less {
            compatible = "zmk,behavior-mod-morph";
            label = "MMB_LESS";
            bindings = <&kp RIGHT_BRACE>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {
        lambda: lambda {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp X &kp SPACE &kp EQUAL &kp GT &kp SPACE &kp LEFT_BRACE>;
            label = "LAMBDA";
        };

        lock: lock {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_pause_for_release>,
                <&macro_wait_time 50>,
                <&to 2>;

            label = "LOCK";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        main_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E             &kp R  &kp T        &kp Y       &kp U  &ht UNDER I  &ht PLUS O  &kp P     &kp BACKSPACE
&kp LSHFT  &kp A  &kp S  &kp D             &kp F  &kp G        &kp H       &kp J  &kp K        &kp L       &kp SEMI  &ht SINGLE_QUOTE DOUBLE_QUOTES
&kp LALT   &kp Z  &kp X  &kp C             &kp V  &kp B        &kp N       &kp M  &kp COMMA    &kp DOT     &kp FSLH  &kp ESC
                         &kp LEFT_CONTROL  &mo 1  &kp SPACE    &kp RETURN  &mo 2  &kp LGUI
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE                 &kp EXCL         &kp AT     &kp HASH              &kp DOLLAR             &kp PERCENT         &kp AMPS           &kp PIPE        &kp MINUS  &kp EQUAL  &kp LEFT_BRACKET  &kp BACKSPACE
&ht LEFT_SHIFT LG(SPACE)  &kp N1           &kp N2     &kp N3                &kp N4                 &kp N5              &kp N6             &kp N7          &kp N8     &kp N9     &kp N0            &kp CARET
&trans                    &kp PRINTSCREEN  &kp ASTRK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET    &kp RIGHT_BRACKET  &kp LEFT_BRACE  &mmb_less  &kp DOT    &kp BSLH          &kp GRAVE
                                                      &trans                &trans                 &trans              &trans             &trans          &trans
            >;
        };

        upper_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp LS(LA(LC(SPACE)))  &kp LA(LC(LG(NUMBER_1)))  &kp LA(LC(LG(NUMBER_2)))  &kp LA(LC(LG(NUMBER_3)))  &kp LA(LC(LG(NUMBER_4)))  &kp LA(LC(LG(NUMBER_5)))    &kp LA(LC(LG(NUMBER_6)))  &kp LA(LC(LG(NUMBER_7)))  &kp LA(LC(LG(NUMBER_8)))  &kp LA(LG(LC(NUMBER_9)))  &kp LA(LC(LG(N0)))  &kp DELETE
&kp LC(LS(SPACE))      &kp LA(LC(LG(A)))         &kp LA(LC(LG(S)))         &kp LA(LC(LG(D)))         &kp LA(LC(LG(F)))         &kp LA(LG(LC(G)))           &kp LEFT_ARROW            &kp DOWN_ARROW            &kp UP_ARROW              &kp RIGHT                 &kp F9              &kp F10
&kp LC(SPACE)          &kp C_VOLUME_DOWN         &kp C_VOL_UP              &kp C_PP                  &kp C_PREV                &kp C_NEXT                  &msc SCRL_LEFT            &msc SCRL_DOWN            &msc SCRL_UP              &msc SCRL_RIGHT           &kp F11             &kp F12
                                                                           &kp LA(LC(LG(TILDE)))     &trans                    &kp LA(LC(TILDE))           &kp F5                    &trans                    &kp F7
            >;
        };

        setting_layer {
            bindings = <
&trans  &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans      &none
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &bt BT_CLR  &trans
&trans  &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans      &studio_unlock
                                    &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        go_settings {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
