/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        lh_pht: left_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <250>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <19 20 21 22>;    // <---[[right-hand keys]]
        };

        rh_pht: rh_pht {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <250>;
            bindings = <&kp>, <&kp>;

            label = "RH_PHT";
            hold-trigger-key-positions = <13 14 15 16>;
        };

        ht_def: ht_def {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <300>;
            bindings = <&to>, <&kp>;

            label = "HT_DEF";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        command_layer {
            bindings = <
&to 1   &none   &none   &none   &none   &trans    &trans          &trans          &none         &trans           &trans  &kp BACKSPACE
&trans  &trans  &trans  &trans  &none   &trans    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans          &trans          &trans        &trans           &trans  &trans
                        &none   &none   &none     &none           &none           &none
            >;
        };

        input_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&ht_def 0 ESCAPE  &kp Q            &kp W           &kp E           &kp R            &kp T        &kp Y    &kp U            &kp I           &kp O               &kp P               &kp BSPC
&kp TAB           &lh_pht LSHFT A  &lh_pht LGUI S  &lh_pht LALT D  &lh_pht LCTRL F  &kp G        &kp H    &rh_pht LCTRL J  &rh_pht RALT K  &rh_pht LEFT_GUI K  &rh_pht RSHFT SEMI  &kp SQT
&kp LCTRL         &kp Z            &kp X           &kp C           &kp V            &kp B        &kp N    &kp M            &kp COMMA       &kp DOT             &kp FSLH            &kp CAPSLOCK
                                                   &kp LGUI        &mo 2            &kp SPACE    &kp RET  &mo 3            &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &trans  &trans  &trans    &trans  &trans       &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS      &kp MINUS  &kp BSPC
&kp TILDE   &trans  &trans  &trans    &trans  &trans       &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp ASTRK     &kp SLASH  &trans
&trans      &trans  &trans  &trans    &trans  &trans       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_0  &kp DOT    &trans
                            &kp LGUI  &trans  &kp SPACE    &kp RET       &trans        &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &none   &none     &none     &none   &none        &kp AMPS   &kp ASTRK    &kp LPAR  &kp RPAR  &kp MINUS  &kp EQUAL
&trans  &kp AT  &kp HASH  &kp DLLR  &trans  &trans       &kp CARET  &trans       &kp LBKT  &kp RBKT  &kp PIPE   &kp GRAVE
&trans  &trans  &trans    &trans    &trans  &trans       &kp EXCL   &kp PERCENT  &kp LT    &kp GT    &kp BSLH   &kp SLASH
                          &none     &trans  &kp SPACE    &kp RET    &trans       &none
            >;
        };

        setting_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans        &trans        &trans        &bt BT_CLR_ALL  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans        &trans        &trans        &trans          &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans          &trans  &trans
                        &trans  &trans  &trans    &trans        &trans        &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        go_settings {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
