/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        lh_pht: left_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <19 20 21 22 18 30 31 32 33 34 35 23 11 10 9 8 7 6 39 40 41>;    // <---[[right-hand keys]]
            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
        };

        rh_pht: rh_pht {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            bindings = <&kp>, <&kp>;

            label = "RH_PHT";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
        };

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
        };

        ht_layer: ht_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_LAYER";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
        };

        mmb_less: mmb_less {
            compatible = "zmk,behavior-mod-morph";
            label = "MMB_LESS";
            bindings = <&kp RIGHT_BRACE>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        ht_key_layer: ht_key_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KEY_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
        };
    };

    macros {
        lambda: lambda {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp X &kp SPACE &kp EQUAL &kp GT &kp SPACE &kp LEFT_BRACE>;
            label = "LAMBDA";
        };

        lock: lock {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_pause_for_release>,
                <&macro_wait_time 50>,
                <&to 3>;

            label = "LOCK";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        main_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E             &kp R  &kp T                    &kp Y                  &kp U  &kp I      &kp O    &kp P     &kp BACKSPACE
&kp LSHFT  &kp A  &kp S  &kp D             &kp F  &kp G                    &kp H                  &kp J  &kp K      &kp L    &kp SEMI  &ht DOUBLE_QUOTES SINGLE_QUOTE
&kp LALT   &kp Z  &kp X  &kp C             &kp V  &kp B                    &kp N                  &kp M  &kp COMMA  &kp DOT  &kp FSLH  &ht_key_layer 5 ESCAPE
                         &kp LEFT_CONTROL  &mo 3  &ht_key_layer 4 SPACE    &ht_key_layer 1 ENTER  &mo 2  &kp LGUI
            >;
        };

        num_layer {
            bindings = <
&kp F1       &kp F2    &kp F3     &kp F4     &kp F5     &kp F6       &kp F7                &kp F8                 &kp F9     &kp F10  &kp F11       &kp BSPC
&kp COLON    &kp N1    &kp N2     &kp N3     &kp N4     &kp N5       &kp N6                &kp N7                 &kp N8     &kp N9   &kp N0        &kp F12
&kp PERCENT  &kp PLUS  &kp MINUS  &kp ASTRK  &kp SLASH  &kp EQUAL    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp COMMA  &kp DOT  &kp QUESTION  &kp ENTER
                                  &kp F11    &kp F10    &kp SPACE    &trans                &kp F5                 &kp F9
            >;
        };

        sym_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp EQUAL            &kp EXCL   &kp AT            &kp HASH              &kp DOLLAR             &kp PERCENT          &kp CARET       &kp AMPS        &kp STAR      &kp N0          &kp PIPE      &kp BACKSPACE
&ht LEFT_SHIFT PLUS  &kp COLON  &kp LEFT_BRACE    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp SEMI      &kp MINUS
&ht LALT TILDE       &kp GRAVE  &kp LEFT_BRACKET  &kp LESS_THAN         &kp GREATER_THAN       &kp RIGHT_BRACKET    &kp SLASH       &kp BACKSLASH   &kp COMMA     &kp DOT         &kp QUESTION  &kp UNDER
                                                  &kp LCTRL             &kp LEFT_GUI           &kp SPACE            &kp ENTER       &trans          &kp DELETE
            >;
        };

        control_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp LA(LC(SPACE))         &kp LA(LC(LG(Q)))  &kp LA(LC(LG(W)))  &kp LA(LC(LG(E)))      &kp LA(LC(LG(R)))  &kp LA(LC(LG(T)))    &kp LA(LC(LG(Y)))      &kp LA(LC(LG(U)))          &kp LA(LC(LG(I)))      &kp LA(LG(LC(O)))    &kp LEFT_BRACKET   &kp BACKSPACE
&ht LEFT_SHIFT LG(SPACE)  &kp LA(LC(LG(A)))  &kp LA(LC(LG(S)))  &kp LA(LC(LG(D)))      &kp LA(LC(LG(F)))  &kp LA(LG(LC(G)))    &kp LA(LC(LG(H)))      &kp LA(LC(LG(J)))          &kp LA(LC(LG(K)))      &kp LA(LC(LG(L)))    &kp LA(LC(GRAVE))  &kp LA(LS(LC(GRAVE)))
&kp LC(SPACE)             &kp LA(LG(LC(Z)))  &kp LA(LC(LG(X)))  &kp LG(LA(LC(C)))      &kp LA(LC(LG(V)))  &kp LA(LC(LG(B)))    &kp LA(LC(LG(N)))      &kp LA(LC(LG(M)))          &kp LA(LC(LG(COMMA)))  &kp LA(LC(LG(DOT)))  &kp LC(GRAVE)      &kp LC(LS(GRAVE))
                                                                &kp LA(LC(LG(TILDE)))  &trans             &kp LA(LC(TILDE))    &kp LC(LA(LS(SPACE)))  &kp LS(LA(LC(LG(SPACE))))  &kp DEL
            >;
        };

        media_layer {
            bindings = <
&kp LC(LS(ESCAPE))  &kp LA(LC(LG(N1)))  &kp LA(LC(LG(N2)))  &kp LA(LC(LG(N3)))      &kp LA(LC(LG(N4)))  &kp LA(LC(LG(N5)))    &kp LA(LC(LG(N6)))     &kp LA(LC(LG(N7)))     &kp LA(LC(LG(N8)))         &kp LA(LC(LG(N9)))       &kp LA(LC(LG(N0)))        &kp LA(LC(DEL))
&kp HOME            &kp LS(LC(LG(N4)))  &kp LC(LS(N4))      &kp LC(LS(N5))          &kp LC(LS(N3))      &kp PSCRN             &kp LA(LC(LG(LS(H))))  &kp LA(LC(LG(LS(J))))  &kp LA(LC(LG(LS(K))))      &kp LA(LC(LG(LS(L))))    &kp LA(LC(LG(LS(SEMI))))  &kp PAGE_UP
&kp END             &kp C_VOL_DN        &kp C_VOL_UP        &kp C_PP                &kp C_PREV          &kp C_NEXT            &kp LS(LA(LC(LG(N))))  &kp LS(LA(LC(LG(M))))  &kp LS(LA(LC(LG(COMMA))))  &kp LS(LA(LC(LG(DOT))))  &kp LS(LA(LC(LG(FSLH))))  &kp PAGE_DOWN
                                                            &kp LA(LC(LEFT_ARROW))  &kp LA(LC(RIGHT))   &trans                &kp LEFT_SHIFT         &kp LA(LC(UP_ARROW))   &kp LA(LC(DOWN))
            >;
        };

        misc_layer {
            bindings = <
&trans  &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &bt BT_CLR
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
